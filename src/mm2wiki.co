sax = require "./sax"
strict = true

DEBUG = false

config =
	linebreak: false

console =
	log: (args...) -> global.console.log args... if DEBUG
	error: (args...) -> global.console.error args... if DEBUG

convert = (mmfile, cb) ->
	parser = sax.parser strict
		
	
	console.log "parsing wikifile: ", mmfile.length

	result = ""

	root = node = text: '', icons: "", nodes: [], parent: undefined
	level = 0
	href = undefined
	minBoldDepth = 3

	parser.onerror = (err) ->
		cb err, result

	parser.ontext = (t) ->
		tt = t.replace(/[\n\r\t]*/g, "")
		if href?
			node.richtext += " #{link2wiki href, tt.trim()} "
			href = undefined
		else
			node.richtext += tt

	parser.onopentag = (tag) ->

		# console.log "<", tag, ">" if tag.name == "a"
		if tag.name == "map"                               # found root node
			level = 0
		if tag.name == "node"                              # found a mm new node
			n = parent: node, nodes: [], icons: ""
			level++
			n.text = parseSimpleNode tag
			node = n
		if tag.name == "richcontent"
			node.richcontent = true
			node.richtext = ''
		if tag.name == "b" or tag.name == "strong"
			node.richtext += "'''" unless level < minBoldDepth
		if tag.name == "i"
			node.richtext += "''"
		if tag.name == "a"
			href = tag.attributes.href
		if tag.name == "font"
			if tag.attributes.BOLD? and level >= minBoldDepth
				node.text = "'''#{node.text}'''"
		if tag.name == "br"
			node.richtext += " "
		if tag.name == "icon"
			node.icons += icon2wiki tag
		if tag.name == "img"
			node.text += img2wiki tag
		
		# cleanup
		if node.richtext?.trim() == ""
			node.richtext = node.richtext.trim()

		if node.text?.trim() == ""
			node.text = node.text.trim()

	parser.onclosetag = (tag) ->
		if tag == "node"
			# console.log   "</", node, ">"
			t = node.text
			if node.richcontent
				t += node.richtext
			if node.icons != ""
				t = node.icons + " " + t
					
			t = addDepthMarker t, level
			node.result = t
			node.parent.nodes.push node

			node = node.parent
			level--
		if tag == "b" or tag == "strong"
			node.richtext += "'''" unless level < minBoldDepth

		if tag == "i"
			node.richtext += "''"

	parser.onend = ->
		result = parseNodeTree root
		console.log result
	
	parser.write(mmfile).close()

	cb undefined, result

	#TODO: break lines for deep nodes, or override with global linebreak config

parseNodeTree = (root) ->
	result = ''
	for n in root.nodes
		result += n.result + parseNodeTree n
	result

toList = (object) ->
	if object?
		if object.length > 1 then object
		else [ object ]
	else []

parseSimpleNode = (node) ->
	a = node.attributes
	t = ''
	if a.TEXT? then t = a.TEXT.trim()
	if a.LINK? then t = link2wiki a.LINK, t
	t

addDepthMarker = (text, depth) ->
	end = "\n"
	start = ""
	switch depth
		when 1 then start = "=";  end = "=\n"
		when 2 then start = "==";   end = "==\n"
		when 3 then start = "* "
		when 4 then start = "** "
		when 5 then start = "*** "
		when 6 then start = "**** "
	
	start + cleanupSpaces(text) + end

cleanupSpaces = (text) ->
	text.replace(/[ ]+/g, ' ').trim()

img2wiki = (img) ->
	a = img.attributes
	t = ""
	if a.src? then t = "see image #{a.src} [[File:#{ a.src }|thumb]]"
	t


# matches for local/file/freemind/url link detection
match_http = /^\s*[hf][t]?tp[s]?/
match_localfile = /^\s*\.\/|^\s*\.\\|^\s*[\\\/\s\w-_0-9]*\.[\.\s\w-_0-9]*/ #may start with ./ or .\, may end with .* or .*.* etc.
match_wikititle = /^\s*[\\\/\s\w-_0-9]*[\s\w-_0-9]*/ #no dots
match_mmext = /\.mm\s*$/

link2wiki = (link, text) ->
	result = ""
	if text?
		if link.match match_http
			result = "[#{link} #{text}]"
		else if link.match match_localfile
			result = "#{text} [[File:#{link}]]"
			result = "mindmap: #{result}" if link.match match_mmext
			# (related wiki site: [[#{link}]])"
		else if link.match match_wikititle
			result = "#{text} [#{link}]"
		else
			result = "#{text}: #{link}"
	else #no text
		if link.match match_http
			result = "[#{link}]"
		else if link.match match_localfile
			result = "[[File:#{link}]]"
		else if link.match match_wikititle
			result = "[#{link}]"
		else
			result = "#{link}"
	return result

icon2wiki = (icon) ->
	a = icon.attributes
	"" unless a.BUILTIN? # handle internal only icons or return empty string
	name = a.BUILTIN
	result = ""

	# helper func to make the mapping code look nice
	o = (utftext, regex) -> result = utftext if name.match regex

	# icon name to ASCII, UNICODE mappings, make sure to use
	# the output as UNICODE and that your wiki supports it.
	# TODO: implement a non-unicode version
	o "<big><big>‚ö†</big></big>",  /warning/
	o "Œµ—ó–∑",                      /freemind/
	o "<big>‚ìò</big>",             /idea/
	o "[<u>‚Ä¶</u>]",               /folder/
	o "<big>‚Åù</big>‚ò∞",            /list/
	o "|<big>‚úé</big>|",           /edit/
	o "<big><big>‚òÜ</big></big>",  /bookmark/
	o "[<small>linux</small>]",   /penguin/
	o "<big><big>‚åö</big></big>",  /clock/
	result

# directly converts a mm file to wiki syntax and puts the result to std out
commandline = (filename) ->
	fs = require "fs"
	file = fs.readFileSync filename, "UTF-8"
	convert file, (err, result) ->
		if err then global.console.error err
		else global.console.log result
		return
	return
		

module.exports.convert = convert
module.exports.cli = commandline

# test for command line usage and call commandline with proper arguments
argv = process.argv
if argv.length > 2 and argv[2] == "mm2wiki" and argv[3]?
	commandline argv[3]





















### ASCII art
# http://utf8-characters.com/geometric-shapes/
# idea: [<u>‚Ñ¶</u>]
# table: ùÑú
# warn: ‚ö†
# musical: ùÑö
# trigram: ‚ò∞ùÑö
# tetragrams: ùçî
# digrams: ùåÖ
# ‚ñà‚ñ¨‚ñà ‚ñà ‚ñÄ‚ñà‚ñÄ
# ‚ñà!‚ñà
# <!>
# <mm>
# &lt;&#F723&gt;
###

###
# LIST OF FREEMIND BUILTIN ICONS:
# -------------------------------
# attach
# back
# bell
# bookmark
# clanbomber
# desktopnew
# flag
# forward
# gohome
# help
# idea
# kaddressbook
# knotify
# korn
# licq
# mail
# password
# pencil
# penguin
# priority-1
# priority-2
# priority-3
# priority-4
# priority-5
# priority-6
# priority-7
# stop
# warning
# wizard
# xmag
###
